package lia

import (
	"math"

	"github.com/maseology/goHydro/grid"
)







func newFaceDefault() face {
	var f face
	f.nfrom = -1
	f.nto = -1
	f.ffw = -1
	f.fbw = -1
	return f
}




// Sub New()
// End Sub
// Sub New(GF As Grid.Face, fid As Integer)
//     With GF
//         _nfrom = .FaceCell(fid)(0)
//         _nto = .FaceCell(fid)(1)
//         If _nfrom = -1 Or _nto = -1 Then
//             _q = 0 ' (default) no flow boundary
//         Else
//             ReDim _forth(3) ' orthogonal faces
//             If .IsUpwardFace(fid) Then ' upward meaning direction normal to face
//                 _ffw = .CellFace(_nto)(1)
//                 _fbw = .CellFace(_nfrom)(3)
//                 _forth(0) = .CellFace(_nfrom)(2)
//                 _forth(1) = .CellFace(_nfrom)(0)
//                 _forth(2) = .CellFace(_nto)(2)
//                 _forth(3) = .CellFace(_nto)(0)
//             Else
//                 _ffw = .CellFace(_nto)(0)
//                 _fbw = .CellFace(_nfrom)(2)
//                 _forth(0) = .CellFace(_nfrom)(3)
//                 _forth(1) = .CellFace(_nfrom)(1)
//                 _forth(2) = .CellFace(_nto)(3)
//                 _forth(3) = .CellFace(_nto)(1)
//             End If
//         End If
//     End With
// End Sub





// Public Sub UpdateFlux(s As _state, dt As Double)
//     With s
//         Dim hf = Math.Max(.N0h, .N1h) - _zx
//         If hf <= 0.000001 Then
//             _q = 0.0
//         Else
//             Dim qmag = Math.Sqrt(_q ^ 2.0 + .AvgOrthoFlux ^ 2.0) ' eq. 8
//             'Dim qmag = Math.Abs(_q) ' de Almeda etal 2012
//             _q = _t * _q + 0.5 * (1.0 - _t) * (.fFlux + .bFlux) - 9.80665 * hf * dt * (.N1h - .N0h) / _dx ' eq. 7 numer
//             _q /= 1 + 9.80665 * dt * _n2 * qmag / hf ^ 2.33333 ' eq.7 denom
//         End If
//     End With
// End Sub

// End Class (face)
